<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\esem16_sdk.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\esem16_sdk.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Dec 10 08:51:57 2019
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Uart_Task &rArr; Uart_Proc &rArr; PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[66]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">ADCINT_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADCINT_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADCINT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[1e]">EMINT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[b]">GPIO0INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[15]">GPIO10INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[16]">GPIO11INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[c]">GPIO1INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[d]">GPIO2INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[e]">GPIO3INT_IRQHandler</a> from intrrupt.o(i.GPIO3INT_IRQHandler) referenced from startup_esem16.o(RESET)
 <LI><a href="#[f]">GPIO4INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[10]">GPIO5INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[11]">GPIO6INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[12]">GPIO7INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[13]">GPIO8INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[14]">GPIO9INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[17]">T16N0INT_IRQHandler</a> from intrrupt.o(i.T16N0INT_IRQHandler) referenced from startup_esem16.o(RESET)
 <LI><a href="#[18]">T16N1INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[19]">T32N0INT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[1d]">UART0RINT_IRQHandler</a> from intrrupt.o(i.UART0RINT_IRQHandler) referenced from startup_esem16.o(RESET)
 <LI><a href="#[1c]">UART0TINT_IRQHandler</a> from intrrupt.o(i.UART0TINT_IRQHandler) referenced from startup_esem16.o(RESET)
 <LI><a href="#[1a]">WDTINT_IRQHandler</a> from startup_esem16.o(.text) referenced from startup_esem16.o(RESET)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from startup_esem16.o(.text)
 <LI><a href="#[22]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[21]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[20]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[28]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[29]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2d]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[ed]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2f]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[f1]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[38]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[105]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[106]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[30]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[32]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[108]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[34]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Uart_Task &rArr; Uart_Proc &rArr; PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[109]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[68]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[37]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[10a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[39]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADCINT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCINT_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCINT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EMINT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIO0INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPIO10INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPIO11INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIO1INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIO2INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO4INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIO5INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>GPIO6INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPIO7INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>GPIO8INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIO9INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>T16N1INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>T32N0INT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDTINT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_esem16.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_esem16.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
</UL>

<P><STRONG><a name="[3d]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2a]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[2c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[db]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[b0]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[88]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
</UL>

<P><STRONG><a name="[d9]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
</UL>

<P><STRONG><a name="[10d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[4a]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[49]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[10e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
</UL>

<P><STRONG><a name="[112]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[4d]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
</UL>

<P><STRONG><a name="[50]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[53]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[52]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[116]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[117]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
</UL>

<P><STRONG><a name="[118]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[119]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[58]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[57]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[11a]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[11b]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[11c]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[11d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[20]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[41]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[60]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[11f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[120]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[5f]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[61]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[62]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[31]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[63]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[36]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[64]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[e2]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[121]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>APHCAL_Adjust</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, emu.o(i.APHCAL_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APHCAL_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_APHCAL
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[73]"></a>Basic_Timer</STRONG> (Thumb, 262 bytes, Stack size 4 bytes, task.o(i.Basic_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Basic_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0INT_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>Bcd2Hex</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, common.o(i.Bcd2Hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_4
</UL>

<P><STRONG><a name="[75]"></a>Bcd2Hex_4</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, common.o(i.Bcd2Hex_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bcd2Hex_4 &rArr; Bcd2Hex
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
</UL>

<P><STRONG><a name="[78]"></a>Breaker_CRC8</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, common.o(i.Breaker_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Breaker_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_ReportId
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
</UL>

<P><STRONG><a name="[77]"></a>Breaker_FrameProc</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, common.o(i.Breaker_FrameProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Breaker_FrameProc &rArr; Breaker_WriteId &rArr; IAP_WriteId &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Off
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_WriteId
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_CRC8
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_On
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[7e]"></a>Breaker_InitDeviceID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, common.o(i.Breaker_InitDeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Breaker_InitDeviceID &rArr; IAP_ReadId &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadId
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
</UL>

<P><STRONG><a name="[81]"></a>Breaker_ReportId</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, common.o(i.Breaker_ReportId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Breaker_ReportId &rArr; RS485_Send_DataToBuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
</UL>

<P><STRONG><a name="[79]"></a>Breaker_WriteId</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, common.o(i.Breaker_WriteId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Breaker_WriteId &rArr; IAP_WriteId &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteId
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadId
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
</UL>

<P><STRONG><a name="[6b]"></a>DelayMs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, common.o(i.DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteUGAIN
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAOFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAGAIN
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteIGAIN
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnergy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteCHECKSUM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAPHCAL
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadUGAIN
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAOFF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAGAIN
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadIGAIN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadCHECKSUM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadAPHCAL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteId
</UL>

<P><STRONG><a name="[83]"></a>EMU_Init</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, emu.o(i.EMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EMU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_ParaInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_EMU
</UL>

<P><STRONG><a name="[86]"></a>EMU_print</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, emu.o(i.EMU_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EMU_print &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Factor
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_Task
</UL>

<P><STRONG><a name="[8d]"></a>EM_Config</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, emu.o(i.EM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EM_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_UGAIN
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PSTART
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PFSET
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PAOFF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PAGAIN
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_IAGAIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_APHCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_EMU
</UL>

<P><STRONG><a name="[ab]"></a>EM_Get_AFAC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Get_AFAC))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Factor
</UL>

<P><STRONG><a name="[aa]"></a>EM_Get_FRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Get_FRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FRQ
</UL>

<P><STRONG><a name="[ac]"></a>EM_Get_IARMS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Get_IARMS))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
</UL>

<P><STRONG><a name="[ad]"></a>EM_Get_PA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Get_PA))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
</UL>

<P><STRONG><a name="[ae]"></a>EM_Get_URMS</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Get_URMS))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
</UL>

<P><STRONG><a name="[84]"></a>EM_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Init
</UL>

<P><STRONG><a name="[85]"></a>EM_ParaInit</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, esem16_em.o(i.EM_ParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Init
</UL>

<P><STRONG><a name="[6a]"></a>EM_Set_APHCAL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_APHCAL))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[91]"></a>EM_Set_IAGAIN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_IAGAIN))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[92]"></a>EM_Set_PAGAIN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_PAGAIN))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[93]"></a>EM_Set_PAOFF</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_PAOFF))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[8f]"></a>EM_Set_PFSET</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_PFSET))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[8e]"></a>EM_Set_PSTART</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_PSTART))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[90]"></a>EM_Set_UGAIN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, esem16_em.o(i.EM_Set_UGAIN))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>

<P><STRONG><a name="[72]"></a>Emu_Adjust_Save</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, emu.o(i.Emu_Adjust_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteUGAIN
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAOFF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAGAIN
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteIGAIN
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteCHECKSUM
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAPHCAL
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage (via Veneer)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[9b]"></a>Emu_GainRead</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, emu.o(i.Emu_GainRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Emu_GainRead &rArr; IAP_ReadUGAIN &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadUGAIN
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAOFF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAGAIN
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadIGAIN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadCHECKSUM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadAPHCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[d2]"></a>Energy_Add</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emu.o(i.Energy_Add))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_Task
</UL>

<P><STRONG><a name="[a2]"></a>Energy_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, emu.o(i.Energy_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Energy_Reset &rArr; IAP_WriteEnergy &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnergy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[b9]"></a>GOIO_PINT_Config</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, esem16_gpio.o(i.GOIO_PINT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GOIO_PINT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CF1_GPIO
</UL>

<P><STRONG><a name="[e]"></a>GPIO3INT_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, intrrupt.o(i.GPIO3INT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO3INT_IRQHandler &rArr; GPIO_PINT_GetIFStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PINT_GetIFStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PINT_ClearIFPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>GPIO_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, esem16_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CF1_GPIO
</UL>

<P><STRONG><a name="[a5]"></a>GPIO_PINT_ClearIFPendingBit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, esem16_gpio.o(i.GPIO_PINT_ClearIFPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3INT_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CF1_GPIO
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_PINT_GetIFStatus</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, esem16_gpio.o(i.GPIO_PINT_GetIFStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PINT_GetIFStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3INT_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>GetErrData</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, emu.o(i.GetErrData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[a9]"></a>Get_FRQ</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, emu.o(i.Get_FRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_FRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_FRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[89]"></a>Get_Factor</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, emu.o(i.Get_Factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Factor
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_AFAC
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[8b]"></a>Get_IRMS</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, emu.o(i.Get_IRMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_IRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_IARMS
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[8a]"></a>Get_PRMS</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, emu.o(i.Get_PRMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_PA
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[8c]"></a>Get_URMS</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, emu.o(i.Get_URMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_URMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_URMS
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
</UL>

<P><STRONG><a name="[af]"></a>GloableVar_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, emu.o(i.GloableVar_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GloableVar_Init &rArr; Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_EMU
</UL>

<P><STRONG><a name="[b1]"></a>Hex2Bcd</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, common.o(i.Hex2Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Hex2Bcd &rArr; HexToBcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_4
</UL>

<P><STRONG><a name="[b3]"></a>Hex2Bcd_4</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, common.o(i.Hex2Bcd_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Hex2Bcd_4 &rArr; Hex2Bcd &rArr; HexToBcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[b2]"></a>HexToBcd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, common.o(i.HexToBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HexToBcd &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd
</UL>

<P><STRONG><a name="[b5]"></a>IAGAIN_Adjust</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, emu.o(i.IAGAIN_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IAGAIN_Adjust &rArr; Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_IAGAIN
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_IARMS
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[9f]"></a>IAP_ReadAPHCAL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadAPHCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadAPHCAL &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[a1]"></a>IAP_ReadCHECKSUM</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadCHECKSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadCHECKSUM &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[9d]"></a>IAP_ReadIGAIN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadIGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadIGAIN &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[80]"></a>IAP_ReadId</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadId &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_WriteId
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_InitDeviceID
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>IAP_ReadPAGAIN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadPAGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadPAGAIN &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[a0]"></a>IAP_ReadPAOFF</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadPAOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadPAOFF &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[9c]"></a>IAP_ReadUGAIN</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_ReadUGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_ReadUGAIN &rArr; IAP_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_GainRead
</UL>

<P><STRONG><a name="[97]"></a>IAP_WriteAPHCAL</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WriteAPHCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WriteAPHCAL &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[9a]"></a>IAP_WriteCHECKSUM</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WriteCHECKSUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WriteCHECKSUM &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[a3]"></a>IAP_WriteEnergy</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, system_esem16.o(i.IAP_WriteEnergy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IAP_WriteEnergy &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Reset
</UL>

<P><STRONG><a name="[95]"></a>IAP_WriteIGAIN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WriteIGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WriteIGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[82]"></a>IAP_WriteId</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WriteId))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WriteId &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Read (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_WriteId
</UL>

<P><STRONG><a name="[96]"></a>IAP_WritePAGAIN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WritePAGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WritePAGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[98]"></a>IAP_WritePAOFF</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WritePAOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WritePAOFF &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[94]"></a>IAP_WriteUGAIN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, system_esem16.o(i.IAP_WriteUGAIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
</UL>

<P><STRONG><a name="[b8]"></a>Init_CF1_GPIO</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, init.o(i.Init_CF1_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_CF1_GPIO &rArr; GPIO_Init &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PINT_ClearIFPendingBit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOIO_PINT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[bb]"></a>Init_User_EMU</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, emu.o(i.Init_User_EMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Init_User_EMU &rArr; GloableVar_Init &rArr; Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[bc]"></a>Init_User_WDT</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, init.o(i.Init_User_WDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_User_WDT &rArr; WDT_Init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[c3]"></a>KEY_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, init.o(i.KEY_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[74]"></a>KeyScan</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, task.o(i.KeyScan))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Basic_Timer
</UL>

<P><STRONG><a name="[be]"></a>Key_Task</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, task.o(i.Key_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Key_Task &rArr; Breaker_ReportId &rArr; RS485_Send_DataToBuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_ReportId
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_InitDeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>LED_Init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, init.o(i.LED_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[d1]"></a>Led_Task</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, task.o(i.Led_Task))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_Task
</UL>

<P><STRONG><a name="[bf]"></a>MCU_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, init.o(i.MCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCU_Init &rArr; Init_User_EMU &rArr; GloableVar_Init &rArr; Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_EMU
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_WDT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CF1_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, esem16_scs.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_WDT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CF1_GPIO
</UL>

<P><STRONG><a name="[c6]"></a>PAGAIN_Adjust</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, emu.o(i.PAGAIN_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PAGAIN_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PAGAIN
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[c7]"></a>PAOFF_Adjust</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, emu.o(i.PAOFF_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_PAOFF
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetErrData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[c1]"></a>RELAY_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(i.RELAY_Init))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[7d]"></a>RELAY_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(i.RELAY_Off))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
</UL>

<P><STRONG><a name="[7a]"></a>RELAY_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(i.RELAY_On))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_init
</UL>

<P><STRONG><a name="[7b]"></a>RS485_Send_DataToBuf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, uart.o(i.RS485_Send_DataToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RS485_Send_DataToBuf &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_ReportId
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
</UL>

<P><STRONG><a name="[c8]"></a>Read_UIP</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, emu.o(i.Read_UIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_UIP &rArr; Get_URMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_URMS
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PRMS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IRMS
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Factor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>Relay_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.Relay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Relay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_On
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>SCU_CLKFLT_Cmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, esem16_scu.o(i.SCU_CLKFLT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[ce]"></a>SCU_EMCLK_Cmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, esem16_scu.o(i.SCU_EMCLK_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[cc]"></a>SCU_EXOSC_DeepSleep_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, esem16_scu.o(i.SCU_EXOSC_DeepSleep_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[ca]"></a>SCU_Init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, esem16_scu.o(i.SCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_SYSCLKConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PCLK_All_Enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EXOSC_DeepSleep_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EMCLK_Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_CLKFLT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cf]"></a>SCU_PCLK_All_Enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, esem16_scu.o(i.SCU_PCLK_All_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[cb]"></a>SCU_SYSCLKConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, esem16_scu.o(i.SCU_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[d0]"></a>Sec_Task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, task.o(i.Sec_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Sec_Task &rArr; EMU_print &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Add
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_print
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>SumCheck</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, common.o(i.SumCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SumCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GloableVar_Init
</UL>

<P><STRONG><a name="[e1]"></a>SysTick_Task</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, task.o(i.SysTick_Task))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>SystemInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, system_esem16.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[17]"></a>T16N0INT_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, intrrupt.o(i.T16N0INT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T16N0INT_IRQHandler &rArr; Basic_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Basic_Timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>Timer0_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, init.o(i.Timer0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[1d]"></a>UART0RINT_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, intrrupt.o(i.UART0RINT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0RINT_IRQHandler &rArr; Uart_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0TINT_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, intrrupt.o(i.UART0TINT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0TINT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_esem16.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>UGAIN_Adjust</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, emu.o(i.UGAIN_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UGAIN_Adjust &rArr; Emu_Adjust_Save &rArr; IAP_WriteUGAIN &rArr; IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Set_UGAIN
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EM_Get_URMS
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bcd2Hex_4
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[c5]"></a>Uart_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, init.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
</UL>

<P><STRONG><a name="[d8]"></a>Uart_Proc</STRONG> (Thumb, 1458 bytes, Stack size 112 bytes, uart.o(i.Uart_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Uart_Proc &rArr; PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bswap_32
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Energy_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_DataToBuf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_Off
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2Bcd_4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_WriteId
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_InitDeviceID
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_FrameProc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RELAY_On
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Task
</UL>

<P><STRONG><a name="[d5]"></a>Uart_Rx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart.o(i.Uart_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RINT_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>Uart_Task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, task.o(i.Uart_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Uart_Task &rArr; Uart_Proc &rArr; PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>Uart_Tx</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, uart.o(i.Uart_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0TINT_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Task
</UL>

<P><STRONG><a name="[bd]"></a>WDT_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, esem16_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WDT_Init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_User_WDT
</UL>

<P><STRONG><a name="[a7]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, esem16_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[da]"></a>bswap_32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(i.bswap_32))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main &rArr; Uart_Task &rArr; Uart_Proc &rArr; PAOFF_Adjust &rArr; GetErrData &rArr; Get_PRMS &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Task
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Task
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sec_Task
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_UIP
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadId
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[22]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UGAIN_Adjust
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAOFF_Adjust
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAGAIN_Adjust
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAGAIN_Adjust
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APHCAL_Adjust
</UL>

<P><STRONG><a name="[e3]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[124]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[7f]"></a>IAP_ErasePage</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, esem16_flashiap.o(i.IAP_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnergy (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emu_Adjust_Save (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteId (via Veneer)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Breaker_InitDeviceID (via Veneer)
</UL>

<P><STRONG><a name="[b6]"></a>IAP_Read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esem16_flashiap.o(i.IAP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadUGAIN (via Veneer)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAOFF (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadPAGAIN (via Veneer)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadIGAIN (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadCHECKSUM (via Veneer)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadAPHCAL (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteId (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadId (via Veneer)
</UL>

<P><STRONG><a name="[e4]"></a>IAP_Unlock</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, esem16_flashiap.o(i.IAP_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[e7]"></a>IAP_WriteCont</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, esem16_flashiap.o(i.IAP_WriteCont))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_WriteCont
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[e6]"></a>IAP_WriteEnd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, esem16_flashiap.o(i.IAP_WriteEnd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[b7]"></a>IAP_WriteWord</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, esem16_flashiap.o(i.IAP_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_WriteWord &rArr; IAP_WriteCont
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteCont
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Unlock
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteUGAIN (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAOFF (via Veneer)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WritePAGAIN (via Veneer)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteIGAIN (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteEnergy (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteCHECKSUM (via Veneer)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteAPHCAL (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteId (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d4]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, init.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[e5]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, esem16_flashiap.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ErasePage
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteWord
</UL>

<P><STRONG><a name="[d3]"></a>SetSysClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_esem16.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4f]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[4e]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[21]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[5c]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[3f]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[40]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
